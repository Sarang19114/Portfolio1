"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_src_components_BlackHole_jsx";
exports.ids = ["_pages-dir-node_src_components_BlackHole_jsx"];
exports.modules = {

/***/ "(pages-dir-node)/./src/components/BlackHole.jsx":
/*!**************************************!*\
  !*** ./src/components/BlackHole.jsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(pages-dir-node)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_EffectComposer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/postprocessing/EffectComposer.js */ \"(pages-dir-node)/./node_modules/three/examples/jsm/postprocessing/EffectComposer.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_RenderPass_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/postprocessing/RenderPass.js */ \"(pages-dir-node)/./node_modules/three/examples/jsm/postprocessing/RenderPass.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/postprocessing/UnrealBloomPass.js */ \"(pages-dir-node)/./node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_ShaderPass_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three/examples/jsm/postprocessing/ShaderPass.js */ \"(pages-dir-node)/./node_modules/three/examples/jsm/postprocessing/ShaderPass.js\");\n/* harmony import */ var _hooks_useInView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useInView */ \"(pages-dir-node)/./src/hooks/useInView.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n\n\n\n\n\nconst BlackHole = ({ className = '' })=>{\n    const mountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const resizeTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const rafRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mouseRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        x: 0,\n        y: 0\n    });\n    const isPausedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Track visibility for pausing render loop\n    const { ref: visibilityRef, isInView } = (0,_hooks_useInView__WEBPACK_IMPORTED_MODULE_2__.useInView)({\n        rootMargin: '0px',\n        threshold: 0.01,\n        triggerOnce: false\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BlackHole.useEffect\": ()=>{\n            const mount = mountRef.current;\n            if (!mount) return;\n            const BLACK_HOLE_RADIUS = 1.3;\n            const DISK_INNER_RADIUS = BLACK_HOLE_RADIUS + 0.2;\n            const DISK_OUTER_RADIUS = 8.0;\n            const DISK_TILT_ANGLE = Math.PI / 3.0;\n            const scene = new three__WEBPACK_IMPORTED_MODULE_3__.Scene();\n            scene.fog = new three__WEBPACK_IMPORTED_MODULE_3__.FogExp2(0x020104, 0.025);\n            const camera = new three__WEBPACK_IMPORTED_MODULE_3__.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 4000);\n            // Fixed base position for the camera\n            const baseCameraPosition = {\n                x: -6.5,\n                y: 5.0,\n                z: 6.5\n            };\n            camera.position.set(baseCameraPosition.x, baseCameraPosition.y, baseCameraPosition.z);\n            const renderer = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderer({\n                antialias: true,\n                powerPreference: \"high-performance\",\n                alpha: true\n            });\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1.5));\n            renderer.outputColorSpace = three__WEBPACK_IMPORTED_MODULE_3__.SRGBColorSpace;\n            renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_3__.ACESFilmicToneMapping;\n            renderer.toneMappingExposure = 1.8; // Increased exposure for brighter, more vivid colors\n            renderer.setClearColor(0x000000, 0.1); // Minimal transparency for vivid colors\n            mount.appendChild(renderer.domElement);\n            const composer = new three_examples_jsm_postprocessing_EffectComposer_js__WEBPACK_IMPORTED_MODULE_4__.EffectComposer(renderer);\n            composer.addPass(new three_examples_jsm_postprocessing_RenderPass_js__WEBPACK_IMPORTED_MODULE_5__.RenderPass(scene, camera));\n            const bloomPass = new three_examples_jsm_postprocessing_UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_6__.UnrealBloomPass(new three__WEBPACK_IMPORTED_MODULE_3__.Vector2(window.innerWidth, window.innerHeight), 1.2, 0.4, 0.9 // Increased bloom strength and threshold for more vibrant effect\n            );\n            composer.addPass(bloomPass);\n            const lensingShader = {\n                uniforms: {\n                    \"tDiffuse\": {\n                        value: null\n                    },\n                    \"blackHoleScreenPos\": {\n                        value: new three__WEBPACK_IMPORTED_MODULE_3__.Vector2(0.5, 0.5)\n                    },\n                    \"lensingStrength\": {\n                        value: 0.12\n                    },\n                    \"lensingRadius\": {\n                        value: 0.3\n                    },\n                    \"aspectRatio\": {\n                        value: window.innerWidth / window.innerHeight\n                    },\n                    \"chromaticAberration\": {\n                        value: 0.005\n                    }\n                },\n                vertexShader: `varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0); }`,\n                fragmentShader: `\n            uniform sampler2D tDiffuse;\n            uniform vec2 blackHoleScreenPos;\n            uniform float lensingStrength;\n            uniform float lensingRadius;\n            uniform float aspectRatio;\n            uniform float chromaticAberration;\n            varying vec2 vUv;\n            \n            void main() {\n                vec2 screenPos = vUv;\n                vec2 toCenter = screenPos - blackHoleScreenPos;\n                toCenter.x *= aspectRatio;\n                float dist = length(toCenter);\n                \n                float distortionAmount = lensingStrength / (dist * dist + 0.003);\n                distortionAmount = clamp(distortionAmount, 0.0, 0.7);\n                float falloff = smoothstep(lensingRadius, lensingRadius * 0.3, dist);\n                distortionAmount *= falloff;\n                \n                vec2 offset = normalize(toCenter) * distortionAmount;\n                offset.x /= aspectRatio;\n                \n                vec2 distortedUvR = screenPos - offset * (1.0 + chromaticAberration);\n                vec2 distortedUvG = screenPos - offset;\n                vec2 distortedUvB = screenPos - offset * (1.0 - chromaticAberration);\n                \n                float r = texture2D(tDiffuse, distortedUvR).r;\n                float g = texture2D(tDiffuse, distortedUvG).g;\n                float b = texture2D(tDiffuse, distortedUvB).b;\n                \n                gl_FragColor = vec4(r, g, b, 1.0);\n            }`\n            };\n            const lensingPass = new three_examples_jsm_postprocessing_ShaderPass_js__WEBPACK_IMPORTED_MODULE_7__.ShaderPass(lensingShader);\n            composer.addPass(lensingPass);\n            // No controls - this is a static background animation\n            const starGeometry = new three__WEBPACK_IMPORTED_MODULE_3__.BufferGeometry();\n            const starCount = 150000;\n            const starPositions = new Float32Array(starCount * 3);\n            const starColors = new Float32Array(starCount * 3);\n            const starSizes = new Float32Array(starCount);\n            const starTwinkle = new Float32Array(starCount);\n            const starFieldRadius = 2000;\n            const starPalette = [\n                new three__WEBPACK_IMPORTED_MODULE_3__.Color(0x88aaff),\n                new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xffaaff),\n                new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xaaffff),\n                new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xffddaa),\n                new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xffeecc),\n                new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xffffff),\n                new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xff8888),\n                new three__WEBPACK_IMPORTED_MODULE_3__.Color(0x88ff88),\n                new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xffff88),\n                new three__WEBPACK_IMPORTED_MODULE_3__.Color(0x88ffff)\n            ];\n            for(let i = 0; i < starCount; i++){\n                const i3 = i * 3;\n                const phi = Math.acos(-1 + 2 * i / starCount);\n                const theta = Math.sqrt(starCount * Math.PI) * phi;\n                const radius = Math.cbrt(Math.random()) * starFieldRadius + 100;\n                starPositions[i3] = radius * Math.sin(phi) * Math.cos(theta);\n                starPositions[i3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n                starPositions[i3 + 2] = radius * Math.cos(phi);\n                const starColor = starPalette[Math.floor(Math.random() * starPalette.length)].clone();\n                starColor.multiplyScalar(Math.random() * 0.7 + 0.3);\n                starColors[i3] = starColor.r;\n                starColors[i3 + 1] = starColor.g;\n                starColors[i3 + 2] = starColor.b;\n                starSizes[i] = three__WEBPACK_IMPORTED_MODULE_3__.MathUtils.randFloat(0.6, 3.0);\n                starTwinkle[i] = Math.random() * Math.PI * 2;\n            }\n            starGeometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_3__.BufferAttribute(starPositions, 3));\n            starGeometry.setAttribute('color', new three__WEBPACK_IMPORTED_MODULE_3__.BufferAttribute(starColors, 3));\n            starGeometry.setAttribute('size', new three__WEBPACK_IMPORTED_MODULE_3__.BufferAttribute(starSizes, 1));\n            starGeometry.setAttribute('twinkle', new three__WEBPACK_IMPORTED_MODULE_3__.BufferAttribute(starTwinkle, 1));\n            const starMaterial = new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial({\n                uniforms: {\n                    uTime: {\n                        value: 0\n                    },\n                    uPixelRatio: {\n                        value: renderer.getPixelRatio()\n                    }\n                },\n                vertexShader: `\n            uniform float uTime;\n            uniform float uPixelRatio;\n            attribute float size;\n            attribute float twinkle;\n            varying vec3 vColor;\n            varying float vTwinkle;\n            \n            void main() {\n                vColor = color;\n                vTwinkle = sin(uTime * 2.5 + twinkle) * 0.5 + 0.5;\n                \n                vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n                gl_PointSize = size * uPixelRatio * (300.0 / -mvPosition.z);\n                gl_Position = projectionMatrix * mvPosition;\n            }\n        `,\n                fragmentShader: `\n            varying vec3 vColor;\n            varying float vTwinkle;\n            \n            void main() {\n                float dist = distance(gl_PointCoord, vec2(0.5));\n                if (dist > 0.5) discard;\n                \n                float alpha = 1.0 - smoothstep(0.0, 0.5, dist);\n                alpha *= (0.2 + vTwinkle * 0.8);\n                \n                gl_FragColor = vec4(vColor, alpha);\n            }\n        `,\n                transparent: true,\n                vertexColors: true,\n                blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending,\n                depthWrite: false\n            });\n            const stars = new three__WEBPACK_IMPORTED_MODULE_3__.Points(starGeometry, starMaterial);\n            scene.add(stars);\n            const eventHorizonGeom = new three__WEBPACK_IMPORTED_MODULE_3__.SphereGeometry(BLACK_HOLE_RADIUS * 1.05, 128, 64);\n            const eventHorizonMat = new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial({\n                uniforms: {\n                    uTime: {\n                        value: 0\n                    },\n                    uCameraPosition: {\n                        value: camera.position\n                    }\n                },\n                vertexShader: `\n            varying vec3 vNormal;\n            varying vec3 vPosition;\n            void main() {\n                vNormal = normalize(normalMatrix * normal);\n                vPosition = position;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n        `,\n                fragmentShader: `\n            uniform float uTime;\n            uniform vec3 uCameraPosition;\n            varying vec3 vNormal;\n            varying vec3 vPosition;\n            \n            void main() {\n                vec3 viewDirection = normalize(uCameraPosition - vPosition);\n                float fresnel = 1.0 - abs(dot(vNormal, viewDirection));\n                fresnel = pow(fresnel, 2.5);\n                \n                vec3 glowColor = vec3(1.0, 0.4, 0.1);\n                float pulse = sin(uTime * 2.5) * 0.15 + 0.85;\n                \n                gl_FragColor = vec4(glowColor * fresnel * pulse, fresnel * 0.4);\n            }\n        `,\n                transparent: true,\n                blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending,\n                side: three__WEBPACK_IMPORTED_MODULE_3__.BackSide\n            });\n            const eventHorizon = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(eventHorizonGeom, eventHorizonMat);\n            scene.add(eventHorizon);\n            const blackHoleGeom = new three__WEBPACK_IMPORTED_MODULE_3__.SphereGeometry(BLACK_HOLE_RADIUS, 128, 64);\n            const blackHoleMat = new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial({\n                color: 0x000000\n            });\n            const blackHoleMesh = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(blackHoleGeom, blackHoleMat);\n            blackHoleMesh.renderOrder = 0;\n            scene.add(blackHoleMesh);\n            const diskGeometry = new three__WEBPACK_IMPORTED_MODULE_3__.RingGeometry(DISK_INNER_RADIUS, DISK_OUTER_RADIUS, 256, 128);\n            const diskMaterial = new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial({\n                uniforms: {\n                    uTime: {\n                        value: 0.0\n                    },\n                    uColorHot: {\n                        value: new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xffffff)\n                    },\n                    uColorMid1: {\n                        value: new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xff7733)\n                    },\n                    uColorMid2: {\n                        value: new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xff4477)\n                    },\n                    uColorMid3: {\n                        value: new three__WEBPACK_IMPORTED_MODULE_3__.Color(0x7744ff)\n                    },\n                    uColorOuter: {\n                        value: new three__WEBPACK_IMPORTED_MODULE_3__.Color(0x4477ff)\n                    },\n                    uNoiseScale: {\n                        value: 2.5\n                    },\n                    uFlowSpeed: {\n                        value: 0.22\n                    },\n                    uDensity: {\n                        value: 1.3\n                    }\n                },\n                vertexShader: `\n            varying vec2 vUv;\n            varying float vRadius;\n            varying float vAngle;\n            void main() {\n                vUv = uv;\n                vRadius = length(position.xy);\n                vAngle = atan(position.y, position.x);\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n        `,\n                fragmentShader: `\n            uniform float uTime;\n            uniform vec3 uColorHot;\n            uniform vec3 uColorMid1;\n            uniform vec3 uColorMid2;\n            uniform vec3 uColorMid3;\n            uniform vec3 uColorOuter;\n            uniform float uNoiseScale;\n            uniform float uFlowSpeed;\n            uniform float uDensity;\n\n            varying vec2 vUv;\n            varying float vRadius;\n            varying float vAngle;\n\n            vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n            vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n            vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }\n            vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n            \n            float snoise(vec3 v) {\n                const vec2 C = vec2(1.0/6.0, 1.0/3.0);\n                const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n                vec3 i  = floor(v + dot(v, C.yyy) );\n                vec3 x0 = v - i + dot(i, C.xxx) ;\n                vec3 g = step(x0.yzx, x0.xyz);\n                vec3 l = 1.0 - g;\n                vec3 i1 = min( g.xyz, l.zxy );\n                vec3 i2 = max( g.xyz, l.zxy );\n                vec3 x1 = x0 - i1 + C.xxx;\n                vec3 x2 = x0 - i2 + C.yyy;\n                vec3 x3 = x0 - D.yyy;\n                i = mod289(i);\n                vec4 p = permute( permute( permute( \n                         i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                       + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                       + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n                float n_ = 0.142857142857;\n                vec3  ns = n_ * D.wyz - D.xzx;\n                vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n                vec4 x_ = floor(j * ns.z);\n                vec4 y_ = floor(j - 7.0 * x_ );\n                vec4 x = x_ *ns.x + ns.yyyy;\n                vec4 y = y_ *ns.x + ns.yyyy;\n                vec4 h = 1.0 - abs(x) - abs(y);\n                vec4 b0 = vec4( x.xy, y.xy );\n                vec4 b1 = vec4( x.zw, y.zw );\n                vec4 s0 = floor(b0)*2.0 + 1.0;\n                vec4 s1 = floor(b1)*2.0 + 1.0;\n                vec4 sh = -step(h, vec4(0.0));\n                vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n                vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n                vec3 p0 = vec3(a0.xy,h.x);\n                vec3 p1 = vec3(a0.zw,h.y);\n                vec3 p2 = vec3(a1.xy,h.z);\n                vec3 p3 = vec3(a1.zw,h.w);\n                vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));\n                p0 *= norm.x; p1 *= norm.y; p2 *= norm.z; p3 *= norm.w;\n                vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n                m = m * m;\n                return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n            }\n\n            void main() {\n                float normalizedRadius = smoothstep(${DISK_INNER_RADIUS.toFixed(2)}, ${DISK_OUTER_RADIUS.toFixed(2)}, vRadius);\n                \n                float spiral = vAngle * 3.0 - (1.0 / (normalizedRadius + 0.1)) * 2.0;\n                vec2 noiseUv = vec2(vUv.x + uTime * uFlowSpeed * (2.0 / (vRadius * 0.3 + 1.0)) + sin(spiral) * 0.1, vUv.y * 0.8 + cos(spiral) * 0.1);\n                float noiseVal1 = snoise(vec3(noiseUv * uNoiseScale, uTime * 0.15));\n                float noiseVal2 = snoise(vec3(noiseUv * uNoiseScale * 3.0 + 0.8, uTime * 0.22));\n                float noiseVal3 = snoise(vec3(noiseUv * uNoiseScale * 6.0 + 1.5, uTime * 0.3));\n                \n                float noiseVal = (noiseVal1 * 0.45 + noiseVal2 * 0.35 + noiseVal3 * 0.2);\n                noiseVal = (noiseVal + 1.0) * 0.5;\n                \n                vec3 color = uColorOuter;\n                color = mix(color, uColorMid3, smoothstep(0.0, 0.25, normalizedRadius));\n                color = mix(color, uColorMid2, smoothstep(0.2, 0.55, normalizedRadius));\n                color = mix(color, uColorMid1, smoothstep(0.5, 0.75, normalizedRadius));\n                color = mix(color, uColorHot, smoothstep(0.7, 0.95, normalizedRadius));\n                \n                color *= (0.5 + noiseVal * 1.0);\n                float brightness = pow(1.0 - normalizedRadius, 1.0) * 3.5 + 0.5;\n                brightness *= (0.3 + noiseVal * 2.2);\n                \n                float pulse = sin(uTime * 1.8 + normalizedRadius * 12.0 + vAngle * 2.0) * 0.15 + 0.85;\n                brightness *= pulse;\n                \n                float alpha = uDensity * (0.2 + noiseVal * 0.9);\n                alpha *= smoothstep(0.0, 0.15, normalizedRadius);\n                alpha *= (1.0 - smoothstep(0.85, 1.0, normalizedRadius));\n                alpha = clamp(alpha, 0.0, 1.0);\n\n                gl_FragColor = vec4(color * brightness, alpha);\n            }\n        `,\n                transparent: true,\n                side: three__WEBPACK_IMPORTED_MODULE_3__.DoubleSide,\n                depthWrite: false,\n                blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending\n            });\n            const accretionDisk = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(diskGeometry, diskMaterial);\n            accretionDisk.rotation.x = DISK_TILT_ANGLE;\n            accretionDisk.renderOrder = 1;\n            scene.add(accretionDisk);\n            const clock = new three__WEBPACK_IMPORTED_MODULE_3__.Clock();\n            const blackHoleScreenPosVec3 = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();\n            // Mouse movement tracking\n            const handleMouseMove = {\n                \"BlackHole.useEffect.handleMouseMove\": (event)=>{\n                    const rect = mount.getBoundingClientRect();\n                    mouseRef.current.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n                    mouseRef.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n                }\n            }[\"BlackHole.useEffect.handleMouseMove\"];\n            const handleResize = {\n                \"BlackHole.useEffect.handleResize\": ()=>{\n                    if (resizeTimeoutRef.current) clearTimeout(resizeTimeoutRef.current);\n                    resizeTimeoutRef.current = setTimeout({\n                        \"BlackHole.useEffect.handleResize\": ()=>{\n                            // Use viewport dimensions for full-width coverage\n                            const width = window.innerWidth;\n                            const height = window.innerHeight;\n                            camera.aspect = width / height;\n                            camera.updateProjectionMatrix();\n                            renderer.setSize(width, height);\n                            composer.setSize(width, height);\n                            bloomPass.resolution.set(width, height);\n                            lensingPass.uniforms.aspectRatio.value = width / height;\n                            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1.5));\n                        }\n                    }[\"BlackHole.useEffect.handleResize\"], 150);\n                }\n            }[\"BlackHole.useEffect.handleResize\"];\n            const animate = {\n                \"BlackHole.useEffect.animate\": ()=>{\n                    rafRef.current = requestAnimationFrame(animate);\n                    // Pause rendering when not in viewport to save GPU\n                    if (!isInView || isPausedRef.current) {\n                        return;\n                    }\n                    const elapsedTime = clock.getElapsedTime();\n                    const deltaTime = clock.getDelta();\n                    diskMaterial.uniforms.uTime.value = elapsedTime;\n                    starMaterial.uniforms.uTime.value = elapsedTime;\n                    eventHorizonMat.uniforms.uTime.value = elapsedTime;\n                    eventHorizonMat.uniforms.uCameraPosition.value.copy(camera.position);\n                    blackHoleScreenPosVec3.copy(blackHoleMesh.position).project(camera);\n                    lensingPass.uniforms.blackHoleScreenPos.value.set((blackHoleScreenPosVec3.x + 1) / 2, (blackHoleScreenPosVec3.y + 1) / 2);\n                    // Subtle camera movement based on mouse position\n                    const mouseInfluence = 0.5; // Adjust this value to control sensitivity\n                    camera.position.x = baseCameraPosition.x + mouseRef.current.x * mouseInfluence;\n                    camera.position.y = baseCameraPosition.y + mouseRef.current.y * mouseInfluence * 0.5;\n                    camera.position.z = baseCameraPosition.z + mouseRef.current.y * mouseInfluence * 0.3;\n                    camera.lookAt(0, 0, 0);\n                    stars.rotation.y += deltaTime * 0.003;\n                    stars.rotation.x += deltaTime * 0.001;\n                    accretionDisk.rotation.z += deltaTime * 0.005;\n                    composer.render();\n                }\n            }[\"BlackHole.useEffect.animate\"];\n            window.addEventListener('resize', handleResize);\n            window.addEventListener('mousemove', handleMouseMove);\n            animate();\n            return ({\n                \"BlackHole.useEffect\": ()=>{\n                    if (rafRef.current) {\n                        cancelAnimationFrame(rafRef.current);\n                    }\n                    window.removeEventListener('resize', handleResize);\n                    window.removeEventListener('mousemove', handleMouseMove);\n                    if (resizeTimeoutRef.current) {\n                        clearTimeout(resizeTimeoutRef.current);\n                    }\n                    if (mount && renderer.domElement.parentNode === mount) {\n                        mount.removeChild(renderer.domElement);\n                    }\n                    renderer.dispose();\n                }\n            })[\"BlackHole.useEffect\"];\n        }\n    }[\"BlackHole.useEffect\"], [\n        isInView\n    ]); // Add isInView dependency\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"style\", {\n                children: `\n        .blackhole-background {\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100vw;\n          height: 100vh;\n          z-index: 0;\n          pointer-events: none;\n        }\n        .blackhole-background canvas {\n          display: block;\n          width: 100% !important;\n          height: 100% !important;\n          opacity: 0.8;\n        }\n      `\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\rasto\\\\Desktop\\\\porto\\\\src\\\\components\\\\BlackHole.jsx\",\n                lineNumber: 452,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: `blackhole-background ${className}`,\n                ref: (node)=>{\n                    mountRef.current = node;\n                    visibilityRef.current = node;\n                }\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\rasto\\\\Desktop\\\\porto\\\\src\\\\components\\\\BlackHole.jsx\",\n                lineNumber: 469,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BlackHole);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/components/BlackHole.jsx\n");

/***/ }),

/***/ "(pages-dir-node)/./src/hooks/useInView.js":
/*!********************************!*\
  !*** ./src/hooks/useInView.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInView: () => (/* binding */ useInView)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Hook to track if an element is in the viewport\r\n * Returns visibility state for conditional rendering and performance optimization\r\n * \r\n * @param {Object} options - IntersectionObserver options\r\n * @param {string} options.rootMargin - Margin around root (default: '200px' for preloading)\r\n * @param {number} options.threshold - Percentage of visibility required (default: 0.01)\r\n * @param {boolean} options.triggerOnce - Only trigger once (default: false for pause/resume)\r\n * @param {boolean} options.unmountWhenHidden - Completely unmount when not visible (default: false)\r\n * @returns {Object} { ref, isInView, hasBeenInView }\r\n */ function useInView(options = {}) {\n    const { rootMargin = '200px', threshold = 0.01, triggerOnce = false, unmountWhenHidden = false } = options;\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [isInView, setIsInView] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [hasBeenInView, setHasBeenInView] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useInView.useEffect\": ()=>{\n            const element = ref.current;\n            if (!element) return;\n            // If triggerOnce and already been in view, keep it visible\n            if (triggerOnce && hasBeenInView) {\n                setIsInView(true);\n                return;\n            }\n            const observer = new IntersectionObserver({\n                \"useInView.useEffect\": ([entry])=>{\n                    const inView = entry.isIntersecting;\n                    setIsInView(inView);\n                    if (inView && !hasBeenInView) {\n                        setHasBeenInView(true);\n                    }\n                    // If triggerOnce, disconnect after first view\n                    if (triggerOnce && inView) {\n                        observer.disconnect();\n                    }\n                }\n            }[\"useInView.useEffect\"], {\n                rootMargin,\n                threshold\n            });\n            observer.observe(element);\n            return ({\n                \"useInView.useEffect\": ()=>{\n                    observer.disconnect();\n                }\n            })[\"useInView.useEffect\"];\n        }\n    }[\"useInView.useEffect\"], [\n        rootMargin,\n        threshold,\n        triggerOnce,\n        hasBeenInView\n    ]);\n    return {\n        ref,\n        isInView,\n        hasBeenInView,\n        // For complete unmounting when not visible\n        shouldRender: unmountWhenHidden ? isInView || !hasBeenInView : true\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3NyYy9ob29rcy91c2VJblZpZXcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBRXBEOzs7Ozs7Ozs7O0NBVUMsR0FDTSxTQUFTRyxVQUFVQyxVQUFVLENBQUMsQ0FBQztJQUNwQyxNQUFNLEVBQ0pDLGFBQWEsT0FBTyxFQUNwQkMsWUFBWSxJQUFJLEVBQ2hCQyxjQUFjLEtBQUssRUFDbkJDLG9CQUFvQixLQUFLLEVBQzFCLEdBQUdKO0lBRUosTUFBTUssTUFBTVIsNkNBQU1BLENBQUM7SUFDbkIsTUFBTSxDQUFDUyxVQUFVQyxZQUFZLEdBQUdULCtDQUFRQSxDQUFDO0lBQ3pDLE1BQU0sQ0FBQ1UsZUFBZUMsaUJBQWlCLEdBQUdYLCtDQUFRQSxDQUFDO0lBRW5ERixnREFBU0E7K0JBQUM7WUFDUixNQUFNYyxVQUFVTCxJQUFJTSxPQUFPO1lBQzNCLElBQUksQ0FBQ0QsU0FBUztZQUVkLDJEQUEyRDtZQUMzRCxJQUFJUCxlQUFlSyxlQUFlO2dCQUNoQ0QsWUFBWTtnQkFDWjtZQUNGO1lBRUEsTUFBTUssV0FBVyxJQUFJQzt1Q0FDbkIsQ0FBQyxDQUFDQyxNQUFNO29CQUNOLE1BQU1DLFNBQVNELE1BQU1FLGNBQWM7b0JBRW5DVCxZQUFZUTtvQkFFWixJQUFJQSxVQUFVLENBQUNQLGVBQWU7d0JBQzVCQyxpQkFBaUI7b0JBQ25CO29CQUVBLDhDQUE4QztvQkFDOUMsSUFBSU4sZUFBZVksUUFBUTt3QkFDekJILFNBQVNLLFVBQVU7b0JBQ3JCO2dCQUNGO3NDQUNBO2dCQUNFaEI7Z0JBQ0FDO1lBQ0Y7WUFHRlUsU0FBU00sT0FBTyxDQUFDUjtZQUVqQjt1Q0FBTztvQkFDTEUsU0FBU0ssVUFBVTtnQkFDckI7O1FBQ0Y7OEJBQUc7UUFBQ2hCO1FBQVlDO1FBQVdDO1FBQWFLO0tBQWM7SUFFdEQsT0FBTztRQUNMSDtRQUNBQztRQUNBRTtRQUNBLDJDQUEyQztRQUMzQ1csY0FBY2Ysb0JBQW9CRSxZQUFZLENBQUNFLGdCQUFnQjtJQUNqRTtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHJhc3RvXFxEZXNrdG9wXFxwb3J0b1xcc3JjXFxob29rc1xcdXNlSW5WaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuXHJcbi8qKlxyXG4gKiBIb29rIHRvIHRyYWNrIGlmIGFuIGVsZW1lbnQgaXMgaW4gdGhlIHZpZXdwb3J0XHJcbiAqIFJldHVybnMgdmlzaWJpbGl0eSBzdGF0ZSBmb3IgY29uZGl0aW9uYWwgcmVuZGVyaW5nIGFuZCBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cclxuICogXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgb3B0aW9uc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5yb290TWFyZ2luIC0gTWFyZ2luIGFyb3VuZCByb290IChkZWZhdWx0OiAnMjAwcHgnIGZvciBwcmVsb2FkaW5nKVxyXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy50aHJlc2hvbGQgLSBQZXJjZW50YWdlIG9mIHZpc2liaWxpdHkgcmVxdWlyZWQgKGRlZmF1bHQ6IDAuMDEpXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy50cmlnZ2VyT25jZSAtIE9ubHkgdHJpZ2dlciBvbmNlIChkZWZhdWx0OiBmYWxzZSBmb3IgcGF1c2UvcmVzdW1lKVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMudW5tb3VudFdoZW5IaWRkZW4gLSBDb21wbGV0ZWx5IHVubW91bnQgd2hlbiBub3QgdmlzaWJsZSAoZGVmYXVsdDogZmFsc2UpXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IHsgcmVmLCBpc0luVmlldywgaGFzQmVlbkluVmlldyB9XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlSW5WaWV3KG9wdGlvbnMgPSB7fSkge1xyXG4gIGNvbnN0IHtcclxuICAgIHJvb3RNYXJnaW4gPSAnMjAwcHgnLFxyXG4gICAgdGhyZXNob2xkID0gMC4wMSxcclxuICAgIHRyaWdnZXJPbmNlID0gZmFsc2UsXHJcbiAgICB1bm1vdW50V2hlbkhpZGRlbiA9IGZhbHNlXHJcbiAgfSA9IG9wdGlvbnM7XHJcblxyXG4gIGNvbnN0IHJlZiA9IHVzZVJlZihudWxsKTtcclxuICBjb25zdCBbaXNJblZpZXcsIHNldElzSW5WaWV3XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbaGFzQmVlbkluVmlldywgc2V0SGFzQmVlbkluVmlld10gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gcmVmLmN1cnJlbnQ7XHJcbiAgICBpZiAoIWVsZW1lbnQpIHJldHVybjtcclxuXHJcbiAgICAvLyBJZiB0cmlnZ2VyT25jZSBhbmQgYWxyZWFkeSBiZWVuIGluIHZpZXcsIGtlZXAgaXQgdmlzaWJsZVxyXG4gICAgaWYgKHRyaWdnZXJPbmNlICYmIGhhc0JlZW5JblZpZXcpIHtcclxuICAgICAgc2V0SXNJblZpZXcodHJ1ZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihcclxuICAgICAgKFtlbnRyeV0pID0+IHtcclxuICAgICAgICBjb25zdCBpblZpZXcgPSBlbnRyeS5pc0ludGVyc2VjdGluZztcclxuICAgICAgICBcclxuICAgICAgICBzZXRJc0luVmlldyhpblZpZXcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpblZpZXcgJiYgIWhhc0JlZW5JblZpZXcpIHtcclxuICAgICAgICAgIHNldEhhc0JlZW5JblZpZXcodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB0cmlnZ2VyT25jZSwgZGlzY29ubmVjdCBhZnRlciBmaXJzdCB2aWV3XHJcbiAgICAgICAgaWYgKHRyaWdnZXJPbmNlICYmIGluVmlldykge1xyXG4gICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHJvb3RNYXJnaW4sXHJcbiAgICAgICAgdGhyZXNob2xkXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICB9O1xyXG4gIH0sIFtyb290TWFyZ2luLCB0aHJlc2hvbGQsIHRyaWdnZXJPbmNlLCBoYXNCZWVuSW5WaWV3XSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByZWYsXHJcbiAgICBpc0luVmlldyxcclxuICAgIGhhc0JlZW5JblZpZXcsXHJcbiAgICAvLyBGb3IgY29tcGxldGUgdW5tb3VudGluZyB3aGVuIG5vdCB2aXNpYmxlXHJcbiAgICBzaG91bGRSZW5kZXI6IHVubW91bnRXaGVuSGlkZGVuID8gaXNJblZpZXcgfHwgIWhhc0JlZW5JblZpZXcgOiB0cnVlXHJcbiAgfTtcclxufVxyXG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VJblZpZXciLCJvcHRpb25zIiwicm9vdE1hcmdpbiIsInRocmVzaG9sZCIsInRyaWdnZXJPbmNlIiwidW5tb3VudFdoZW5IaWRkZW4iLCJyZWYiLCJpc0luVmlldyIsInNldElzSW5WaWV3IiwiaGFzQmVlbkluVmlldyIsInNldEhhc0JlZW5JblZpZXciLCJlbGVtZW50IiwiY3VycmVudCIsIm9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyeSIsImluVmlldyIsImlzSW50ZXJzZWN0aW5nIiwiZGlzY29ubmVjdCIsIm9ic2VydmUiLCJzaG91bGRSZW5kZXIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/hooks/useInView.js\n");

/***/ })

};
;